package com.ibanity.api;

import com.ibanity.exceptions.ResourceNotFoundException;
import com.ibanity.models.AccountInformationAccessRequest;
import com.ibanity.models.CustomerAccessToken;
import com.ibanity.models.FinancialInstitution;

import java.util.List;
import java.util.UUID;

/**
 * Service for Financial Institutions related APIs
 */
public interface FinancialInstitutionsService {
    /**
     * Get all Financial Institutions supported by iBanity
     * @return List of Financial Institutions
     */
    List<FinancialInstitution> getFinancialInstitutions();

    /**
     * Get the details of a specific Financial Institution
     * @param id the iBanity UUID of the Financial Institution
     * @return The Financial Institution Details
     * @throws ResourceNotFoundException when the provided ID is not known
     */
    FinancialInstitution getFinancialInstitution(UUID id) throws ResourceNotFoundException;

    /**
     * Provide the URL to be redirected to the PSU (end-user) Web Browser.
     * The Redirect URL will redirect the end-user to the Financial Institution in order to authorize iBanity to access the selected bank accounts
     * @param customerAccessToken the token generated by the call to the corresponding service (See @link com.ibanity.api.CustomerAccessTokenService#createCustomerAccessToken(CustomerAccessToken)}
     * @param financialInstitutionId The Financial Information UUID for which the account access will be requested
     * @param accountInformationAccessRequest Information related to the request:
     *                                        redirect URI : to redirect the end-user to the TPP page after the authorization flow has been completed, this URI needs to be a URI referenced in the iBanity Portal
     *                                        consentRefenrence: the consent reference
     * @return an accountInformationAccessRequest containing a redirect URI (proprety: links.redirect) to be provided, as redirect response, to the end-user browser
     */
    AccountInformationAccessRequest getAccountInformationAccessRedirectUrl(CustomerAccessToken customerAccessToken, UUID financialInstitutionId, AccountInformationAccessRequest accountInformationAccessRequest);
}
